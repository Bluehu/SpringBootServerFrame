# 容器 配置
server:
  port: 9001
#  port: 80
#  port: 443
#  ssl:
#    key-store: classpath:any.jks
#    key-password: 214174460510953
  undertow:
    worker-threads: 100 # 阻塞任务线程池, 当执行类似servlet请求阻塞操作, undertow会从这个线程池中取得线程,它的值设置取决于系统的负载
    buffer-size: 256 #每块buffer的空间大小,越小的空间被利用越充分
    io-threads: 4 # 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接, 默认设置每个CPU核心一个线程
    direct-buffers: true # 是否分配的直接内存

# 数据库 及 Redis 配置
spring:
  profiles:
    active: test
  redis:
    # Redis服务器地址
    host: *** # 测试环境
    # Redis服务器连接端口
    port: 6379
    # Redis服务器连接密码（默认为空）
    password: ***
    # Redis数据库索引（默认为0）
    database: 1
    pool:
      # 连接池最大连接数（使用负值表示没有限制）
      max-active: 100
      # 连接池最大阻塞等待时间（使用负值表示没有限制）
      max-wait: -1
      # 连接池中的最大空闲连接
      max-idle: 100
      # 连接池中的最小空闲连接
      min-idle: 0
    # 连接超时时间（毫秒）
    timeout: 0
  cache:
    type: redis
#  MongoDB
  data:
    mongodb:
      # 测试环境
      uri: mongodb://***

#  thymeleaf:
#    cache: false
# Mybatis 配置
mybatis:
  configuration:
    map-underscore-to-camel-case: true    # 驼峰命名转换
app:
  buildType: T
#  msg-thread-pool:
#    CORE_POOL_SIZE: 1
#    MAXIMUM_POOL_SIZE: 128
#    KEEP_ALIVE_SECOND: 5
